#BlueJ class context
comment0.params=level\ penalty
comment0.target=Game(int,\ int)
comment0.text=\r\n\ Constructor\ for\ a\ Game.\r\n\ Reads\ the\ level\ number\ and\ the\ player\ penalty\ (penalty\ is\ not\ a\ negative\ number).\r\n
comment1.params=
comment1.target=void\ act()
comment1.text=\r\n\ Performs\ this\ every\ in-game\ tick\:\r\n\ Check\ if\ the\ level\ is\ completed.\r\n\ Check\ if\ the\ pixels\ should\ be\ shifted\ a\ little\ to\ the\ left.\r\n\ Update\ the\ info\ bar\ at\ the\ top.\r\n
comment10.params=enemy
comment10.target=void\ removeEnemy(Enemy)
comment10.text=\r\n\ Given\ an\ enemy.\r\n\ Safely\ remove\ the\ enemy\ from\ the\ Game\ world.\r\n
comment11.params=
comment11.target=void\ doneLevel()
comment11.text=\r\n\ Go\ to\ the\ next\ level,\ or\ complete\ the\ game\ if\ no\ next\ level\ exists.\r\n
comment12.params=delay
comment12.target=void\ die(int)
comment12.text=\r\n\ Method\ called\ when\ the\ player\ is\ dead\ or\ the\ game\ is\ finished.\r\n\ Either\ way,\ the\ effect\ is\ the\ same.\ In\ the\ end,\ the\ DeathScreen\ world\ is\ initialized.\r\n
comment2.params=
comment2.target=void\ updateInfoBar()
comment2.text=\r\n\ A\ simple\ method\ to\ update\ the\ info\ bar\ of\ the\ game.\r\n\ This\ method\ is\ a\ universal\ way\ for\ any\ object\ to\ update\ the\ game's\ info\ bar.\r\n
comment3.params=
comment3.target=void\ loadBeginningColumns()
comment3.text=\r\n\ This\ method\ is\ run\ once\ in\ the\ world's\ constructor.\r\n\ Load\ all\ of\ the\ columns\ at\ the\ beginning\ of\ the\ level.\r\n\ This\ code\ has\ a\ slight\ advantage\ over\ running\ loadColumn()\ COLUMN_COUNT\ times.\r\n
comment4.params=
comment4.target=void\ loadColumn()
comment4.text=\r\n\ This\ method\ is\ run\ every\ time\ a\ new\ column\ is\ needed.\r\n\ All\ of\ the\ blocks\ in\ blockMap\ get\ shifted,\ and\ a\ new\ column\ is\ read\ from\ the\ file\ and\ inserted.\r\n\ When\ an\ enemy\ is\ encountered\ in\ the\ level\ file,\ getObjectFromFile()\ is\ called\ to\ interpret\ the\ information\ properly.\r\n
comment5.params=id
comment5.target=void\ getObjectFromFile(int)
comment5.text=\r\n\ Given\ the\ object\ id,\ read\ the\ object\ and\ put\ the\ info\ into\ an\ array.\r\n\ Then\ send\ the\ info\ to\ loadObject()\ for\ parsing.\r\n
comment6.params=id\ info
comment6.target=void\ loadObject(int,\ int[])
comment6.text=\r\n\ The\ method\ is\ given\ an\ object\ in\ the\ form\ of\ an\ array\ (array\ is\ like\ a\ blueprint).\r\n\ Then\ the\ method\ initializes\ the\ actor\ and\ puts\ it\ into\ the\ Game\ world.\r\n
comment7.params=
comment7.target=void\ pushBackPixel()
comment7.text=\r\n\ Get\ all\ the\ actors\ in\ the\ level\ and\ push\ them\ back\ by\ one\ pixel.\r\n\ Includes\:\ player,\ all\ enemies,\ all\ map\ blocks\r\n
comment8.params=actorUp\ actorDown\ actorLeft\ actorRight\ deltaX\ deltaY\ hitsPlayer
comment8.target=int[]\ getNewPosition(int,\ int,\ int,\ int,\ int,\ int,\ boolean)
comment8.text=\r\n\ You\ have\ an\ actor\ in\ this\ Game\ world.\r\n\ The\ actor\ moves\ around,\ and\ you\ want\ it\ to\ also\ collide\ with\ the\ map\ blocks.\r\n\ Then\ provide\ the\ actor's\ bounding\ coordinates,\ and\ request\ the\ amount\ of\ (x,\ y)\ movement.\r\n\ Give\ this\ method\ all\ this\ info,\ and\ it\ will\ return\ the\ amount\ of\ actual\ (x,\ y)\ movement,\r\n\ and\ a\ return\ code\ (collide\ with\ wall/player?).\r\n
comment9.params=x1\ y1\ x2\ y2
comment9.target=boolean\ checkSegment(int,\ int,\ int,\ int)
comment9.text=\r\n\ A\ method\ that\ is\ very\ important\ to\ getNewPosition()\r\n\ Checks\ if\ a\ line\ segment\ overlaps\ with\ any\ map\ blocks.\r\n
numComments=13
